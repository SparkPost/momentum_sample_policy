#!/opt/msys/3rdParty/bin/perl

use Ecelerity::Control;
use Getopt::Long;
use XML::Simple;
use Data::Dumper;
use Pod::Usage;
  

my %rtn;  # Nagios return codes and strings
$rtn{'0'} = "OK";
$rtn{'1'} = "WARNING";
$rtn{'2'} = "CRITICAL";
$rtn{'3'} = "UNKNOWN";

my %opt;
$opt{port} = '/tmp/2025';
$opt{min} = '25';
$opt{grep} = '';
$opt{debug} = '';
$opt{test} = '';


GetOptions( \%opt,
                "help",
                "port:s",                 # ec_console control port.  Default: /tmp/2025
                "user:s",                 # ec_console username
                "pass:s",                 # ec_console passwd
                "cmd1:s",                 # ec_console command
                "cmd2:s",                 # ec_console command
                "key1:s",                 # key to check from cmd output
                "key2:s",                 # key to check from cmd2 output
                "grep:s",                 # use this regex to grep for key instead of parsing XML
                "min:s",                  # The min value of InboundConcurrency before any alerts fire
                "warn|loWarn:s",          # The low threshold at which to start wanring
                "hiWarn:s",               # The high threshold at which to start wanring
                "crit|loCrit:s",          # The low threshold at which to start criticals
                "hiCrit:s",               # The high threshold at which to start criticals
                "showThresh",             # Toggle output of Threshold setting
                "consoleDebug|ninja",     # put the console in debug mode with command: debugging mode
                "test",                   # dont execute any commands
                "debug"                   # verbose
          );

# Dump args for debugging
if ( $opt{debug} )
  {
  print "Got Args:\n";
  foreach my $key ( sort(keys(%opt)) )
    {
    print "   $key:$opt{$key}\n";
    }
  }

# check opts
my $msg = '';
usage() if $opt{help};
$msg .= "cmd1 " if !$opt{cmd1};
$msg .= "key1 " if !$opt{key1};
$msg .= "cmd2 " if !$opt{cmd2};
$msg .= "key2 " if !$opt{key2};
$msg .= "warn " if ( $opt{warn} eq '' && $opt{warn} ne '0' );
$msg .= "crit " if ( $opt{crit} eq '' && $opt{crit} ne '0' );
print "Missing args: $msg\n" if $msg;
usage($msg) if $msg;


my $ecc;
if ( $opt{user} && $opt{pass} )
        { $ecc = Ecelerity::Control->new( { Control => $opt{port}, User => $opt{user}, Pass => $opt{pass} } ); }
else
        { $ecc = Ecelerity::Control->new( { Control => $opt{port} } ); }

eval { $ecc->connect(); };
  if ($@) {
        # Catch any could not connect error
        $@ =~ /^(.*) at/; # Fetch just the error message and no file/line no.
        print "CRITICAL - Error connecting to ec_console: $1\n";
        exit(2);
  }


if ( $opt{consoleDebug} )
	{
	my $ref = $ecc->command( "debugging mode" );
	chomp($ref);
	print "Failed to enter debugging mode\n" if $ref ne 'I am Ten Ninjas';
	}

my $ref1 = "";
my $ref1 = "";
my $val2 = "";
my $val2 = "";
if ( ! $opt{grep} )
{
print "Going to parse XML\n" if $opt{debug};
# This throws a non-fatal error to STDERR since we are missing the ParserDetails.ini file.
$ref1 = ( XMLin($ecc->command( $opt{cmd1} ), ForceArray => '1' ) );
print "Done running cmd1\n" if $opt{debug};

$ref2 = ( $ecc->command( $opt{cmd2} ) ) ;
print "Done running cmd2\n" if $opt{debug};


#print Dumper($ref);
if ( $opt{debug} )
  {
  print "All Data1:\n";
  foreach my $key ( sort(keys(%{$ref1})) )
    {
  print "   $key = " . $ref1 -> {$key}[0] . "\n";
    }
  }
if ( $opt{debug} )
  {
  print "All Data2:\n$ref2";
  }


$val1 = $ref1 -> {"$opt{'key1'}"}[0];
#$val2 = $ref2 -> {"$opt{'key2'}"}[0];
$val2 = $ref2 =~ tr/\n/\n/;

print "Got count on val1 of: $val1\n" if $opt{debug};
print "Got count on val2 of: $val2\n" if $opt{debug};


}
else
	{
	print "Going to do grep\n" if $opt{debug};
	$ref = ($ecc->command($opt{cmd})); 
	my $regex = $opt{grep};
	$ref =~ /$regex/;
	$val = $1;
	}

if ( $val1 eq "" )
  {
  print $rtn{3}, ": No data returned for cmd1: $opt{cmd1}. key1: $opt{key1}\n";
  exit(3);
  }
if ( $val2 eq "" )
  {
  print $rtn{3}, ": No data returned for cmd2: $opt{cmd2}. key2: $opt{key2}\n";
  exit(3);
  }

my $show = "";
if ( $opt{showThresh} )
	{
	my $tmp ="";
	$tmp = $opt{warn} ? $opt{warn} : '*Disabled*';  # print the word 'disabled' instead of 0
	$show .= " Warning: $tmp";
	$show .= ", Warning (High): $opt{hiWarn}" if $opt{hiWarn};
	$tmp = $opt{crit} ? $opt{crit} : '*Disabled*';  # print the word 'disabled' instead of 0
	$show .= ", Critical: $tmp";
	$show .= ", Critical (High): $opt{hiCrit}" if $opt{hiCrit};
	$show = "- Thresholds -" . $show;
	}

# Threshold logic

my $diff = $val1 - $val2;
my $pdiff = ( $diff / $val1 ) * 100 if ( ($val1 ne 0) && ($diff ne 0) );
print " diff is: $diff\n" if $opt{debug};
print "pdiff is: $pdiff\n" if $opt{debug};
$pdiff = sprintf("%.3f", $pdiff);

if ( $val1 < $opt{min} )
	{
	print $rtn{0}, " -  $opt{key1}:$val1 / $opt{key2}:$val2 = $pdiff% (min val $opt{min} not reached)  $show\n";
	exit(0);
	}

if ( ($opt{crit} ne '0')  &&  ($pdiff >= $opt{crit}) )
	{
#	$pdiff =~ s/(\....).*$/$1/;
        print $rtn{2}, " -  $opt{key1}:$val1 / $opt{key2}:$val2 = $pdiff% $show\n";
        exit(2);	
	}

if ( ($opt{warn} ne '0') && ($pdiff >= $opt{warn}) )
	{
#	$pdiff =~ s/(\....).*$/$1/;
        print $rtn{1}, " -  $opt{key1}:$val1 / $opt{key2}:$val2 = $pdiff% $show\n";
        exit(1);	
	}


print $rtn{0}, " -  $opt{key1}:$val1 / $opt{key2}:$val2 = $pdiff% $show\n";
exit(0);

sub usage
  {
  print "This is the Nagios NRPE Plugin Template.  Put your stuff here.";
  print "usage: $0 \n";
  print '                "help",
                "port:s",                 # ec_console control port.  Default: /tmp/2025
                "user:s",                 # ec_console username
                "pass:s",                 # ec_console passwd
                "cmd1:s",                 # ec_console command
                "cmd2:s",                 # ec_console command
                "key1:s",                 # key to check from cmd output
                "key2:s",                 # key to check from cmd2 output
                "grep:s",                 # use this regex to grep for key instead of parsing XML
                "min:s",                  # The min value of InboundConcurrency before any alerts fire
                "warn|loWarn:s",          # The low threshold at which to start wanring
                "hiWarn:s",               # The high threshold at which to start wanring
                "crit|loCrit:s",          # The low threshold at which to start criticals
                "hiCrit:s",               # The high threshold at which to start criticals
                "showThresh",             # Toggle output of Threshold setting
                "consoleDebug|ninja",     # put the console in debug mode with command: debugging mode
                "test",                   # dont execute any commands
                "debug"                   # verbose
';
  exit;
  }

